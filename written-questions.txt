Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
	
>> Each thread runs the parse method with a separate time, which are summed up at the end. So it takes longer.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

>>The parallel web crawler requires more than one thread to function properly. It will do poorly on a one-thread computer, whereas the sequential webcrawler actually works sequentially which is ideal for one thread.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

>>To outperform the sequential webcrawler, the parallel webcrawler needs multiple threads to run things in parallel, thus it needs a multi-core computer.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

>>The level of performance.

    (b) What are the join points of the Profiler in the web crawler program?

>>The methods with the @Profiled annotations.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

>>Proxy Pattern  with: ProfilerImpl class.
   Pros: Provide a delegate for another object to control access to the class.
   Cons: makes the code harder to understand.

>>Builder Pattern with: CrawlerConfiguration class, CrawlResult class, ParserModule class.
   Pros: separates the construction of an object from its representation. So we can create multiple representations.
   Cons: more code

>>Dependency Injection with: Profiler class, WebCrawlerMain class.
   Pros: the classes accept the object by injection instead of creating an object so they are more flexible.
   Cons: more classes and interfaces


  

   
